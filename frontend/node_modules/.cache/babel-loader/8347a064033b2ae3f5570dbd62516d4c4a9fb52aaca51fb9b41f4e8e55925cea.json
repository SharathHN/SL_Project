{"ast":null,"code":"var _jsxFileName = \"/home/sharath/Documents/CS699/final_project/SL_Project/frontend/src/components/Dashboard/DoctorDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../../styles/Dashboard.css';\nimport { jwtDecode } from 'jwt-decode'; // Ensure you have installed jwt-decode with `npm install jwt-decode`\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DoctorDashboard() {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const navigate = useNavigate();\n  const [message, setMessage] = useState('');\n\n  // Function to decode the JWT and get doctor ID\n  const getDoctorIdFromJWT = () => {\n    try {\n      const token = localStorage.getItem('doctor_access_token'); // Replace with your token key\n      if (!token) {\n        setMessage('You are not authenticated. Please log in.');\n        return null;\n      }\n      const decoded = jwtDecode(token);\n      console.log('Decoded Token:', decoded);\n      return decoded.sub.id; // Adjust based on your JWT payload structure\n    } catch (error) {\n      console.error('Error decoding JWT:', error);\n      setMessage('Invalid authentication token.');\n      return null;\n    }\n  };\n  useEffect(() => {\n    const fetchAppointments = async () => {\n      try {\n        const token = localStorage.getItem('doctor_access_token'); // Get the token\n        const id = getDoctorIdFromJWT(); // Get the doctor ID from the token\n\n        if (!id || !token) {\n          console.error('Missing doctor ID or token');\n          return;\n        }\n\n        // Fetch appointments for the doctor\n        const response = await fetch(`http://127.0.0.1:5000/api/appointments/doctor/${id}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}` // Add the JWT token\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n\n          // Fetch patient names for each appointment\n          const updatedAppointments = await Promise.all(data.appointments.map(async appointment => {\n            const patientResponse = await fetch(`http://127.0.0.1:5000/api/doctor/patients/${appointment.patient_id}`,\n            // Fetch patient details using patientId\n            {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}` // Add the JWT token\n              }\n            });\n            if (patientResponse.ok) {\n              const patientData = await patientResponse.json();\n              return {\n                ...appointment,\n                name: patientData.name\n              }; // Add patient name to appointment\n            } else {\n              console.error('Failed to fetch patient details for ID:', appointment.patientId);\n              return {\n                ...appointment,\n                name: 'Unknown'\n              }; // Fallback if patient API fails\n            }\n          }));\n          setAppointments(updatedAppointments);\n        } else {\n          console.error('Failed to fetch appointments.');\n        }\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    };\n    fetchAppointments();\n  }, []);\n  const handlePatientForm = patientId => {\n    // Navigate to the patient's form page using their ID\n    navigate(`/patient-form/${patientId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"dashboard-title\",\n      children: \"Doctor Dashboard - Appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), appointments.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"appointments-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Sl. No.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Patient Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: appointments.map((appointment, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: appointment.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: new Date(appointment.date).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-button\",\n              onClick: () => handlePatientForm(appointment.patientId),\n              children: \"View Form\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }, this)]\n        }, appointment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-appointments\",\n      children: \"No appointments available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorDashboard, \"xU/aoQ42zuI+7ABBRQHR7CoPXxA=\", false, function () {\n  return [useNavigate];\n});\n_c = DoctorDashboard;\nexport default DoctorDashboard;\nvar _c;\n$RefreshReg$(_c, \"DoctorDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jwtDecode","jsxDEV","_jsxDEV","DoctorDashboard","_s","appointments","setAppointments","navigate","message","setMessage","getDoctorIdFromJWT","token","localStorage","getItem","decoded","console","log","sub","id","error","fetchAppointments","response","fetch","method","headers","Authorization","ok","data","json","updatedAppointments","Promise","all","map","appointment","patientResponse","patient_id","patientData","name","patientId","handlePatientForm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","index","Date","date","toLocaleDateString","onClick","_c","$RefreshReg$"],"sources":["/home/sharath/Documents/CS699/final_project/SL_Project/frontend/src/components/Dashboard/DoctorDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../../styles/Dashboard.css';\nimport {jwtDecode} from 'jwt-decode'; // Ensure you have installed jwt-decode with `npm install jwt-decode`\n\nfunction DoctorDashboard() {\n  const [appointments, setAppointments] = useState([]);\n  const navigate = useNavigate();\n  const [message, setMessage] = useState('');\n\n  // Function to decode the JWT and get doctor ID\n  const getDoctorIdFromJWT = () => {\n    try {\n      const token = localStorage.getItem('doctor_access_token'); // Replace with your token key\n      if (!token) {\n        setMessage('You are not authenticated. Please log in.');\n        return null;\n      }\n      const decoded = jwtDecode(token);\n      console.log('Decoded Token:', decoded);\n      return decoded.sub.id; // Adjust based on your JWT payload structure\n    } catch (error) {\n      console.error('Error decoding JWT:', error);\n      setMessage('Invalid authentication token.');\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    const fetchAppointments = async () => {\n      try {\n        const token = localStorage.getItem('doctor_access_token'); // Get the token\n        const id = getDoctorIdFromJWT(); // Get the doctor ID from the token\n\n        if (!id || !token) {\n          console.error('Missing doctor ID or token');\n          return;\n        }\n\n        // Fetch appointments for the doctor\n        const response = await fetch(`http://127.0.0.1:5000/api/appointments/doctor/${id}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`, // Add the JWT token\n          },\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n\n          // Fetch patient names for each appointment\n          const updatedAppointments = await Promise.all(\n            data.appointments.map(async (appointment) => {\n              const patientResponse = await fetch(\n                \n                `http://127.0.0.1:5000/api/doctor/patients/${appointment.patient_id}`, // Fetch patient details using patientId\n                {\n                  method: 'GET',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`, // Add the JWT token\n                  },\n                }\n              );\n\n              if (patientResponse.ok) {\n                const patientData = await patientResponse.json();\n                \n                return { ...appointment, name: patientData.name }; // Add patient name to appointment\n              } else {\n                console.error('Failed to fetch patient details for ID:', appointment.patientId);\n                return { ...appointment, name: 'Unknown' }; // Fallback if patient API fails\n              }\n            })\n          );\n\n          setAppointments(updatedAppointments);\n        } else {\n          console.error('Failed to fetch appointments.');\n        }\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    };\n\n    fetchAppointments();\n  }, []);\n\n  const handlePatientForm = (patientId) => {\n    // Navigate to the patient's form page using their ID\n    navigate(`/patient-form/${patientId}`);\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h2 className=\"dashboard-title\">Doctor Dashboard - Appointments</h2>\n      {appointments.length > 0 ? (\n        <table className=\"appointments-table\">\n          <thead>\n            <tr>\n              <th>Sl. No.</th>\n              <th>Patient Name</th>\n              <th>Date</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {appointments.map((appointment, index) => (\n              <tr key={appointment.id}>\n                <td>{index + 1}</td>\n                <td>{appointment.name}</td>\n                <td>{new Date(appointment.date).toLocaleDateString()}</td>\n                <td>\n                  <button\n                    className=\"action-button\"\n                    onClick={() => handlePatientForm(appointment.patientId)}\n                  >\n                    View Form\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <div className=\"no-appointments\">No appointments available.</div>\n      )}\n    </div>\n  );\n}\n\nexport default DoctorDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}