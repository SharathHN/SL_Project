{"ast":null,"code":"var _jsxFileName = \"/home/cero-vengeance/SoftwareLab/SL_Project/frontend/src/components/Dashboard/DoctorDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../../styles/Dashboard.css';\nimport { jwtDecode } from 'jwt-decode'; // Ensure you have installed jwt-decode with `npm install jwt-decode`\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  form: {\n    maxWidth: \"400px\",\n    margin: \"0 auto\",\n    padding: \"20px\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"8px\",\n    backgroundColor: \"#f9f9f9\",\n    textAlign: \"center\"\n  },\n  uploadButton: {\n    display: \"inline-block\",\n    padding: \"10px 15px\",\n    margin: \"20px 0\",\n    border: \"1px solid #007bff\",\n    borderRadius: \"4px\",\n    backgroundColor: \"#007bff\",\n    color: \"#fff\",\n    cursor: \"pointer\",\n    textAlign: \"center\"\n  },\n  fileInput: {\n    display: \"none\"\n  },\n  fileName: {\n    marginTop: \"10px\",\n    fontSize: \"14px\",\n    color: \"#555\"\n  },\n  submitButton: {\n    padding: \"10px 15px\",\n    border: \"none\",\n    borderRadius: \"4px\",\n    backgroundColor: \"#007bff\",\n    color: \"#fff\",\n    fontSize: \"16px\",\n    cursor: \"pointer\"\n  }\n};\nfunction DoctorDashboard() {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const navigate = useNavigate();\n  const [message, setMessage] = useState('');\n\n  // Function to decode the JWT and get doctor ID\n  const getDoctorIdFromJWT = () => {\n    try {\n      const token = localStorage.getItem('doctor_access_token'); // Replace with your token key\n      if (!token) {\n        setMessage('You are not authenticated. Please log in.');\n        return null;\n      }\n      const decoded = jwtDecode(token);\n      console.log('Decoded Token:', decoded);\n      return decoded.sub.id; // Adjust based on your JWT payload structure\n    } catch (error) {\n      console.error('Error decoding JWT:', error);\n      setMessage('Invalid authentication token.');\n      return null;\n    }\n  };\n\n  // Function to format the Python datetime to \"DD-MM-YYYY\"\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n    const year = date.getFullYear();\n    return `${day}-${month}-${year}`;\n  };\n  const [pdfBase64, setPdfBase64] = useState(null);\n  const [fileName, setFileName] = useState(null);\n  const [patientData, setPatientData] = useState({});\n\n  // Handle file upload\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (!file) {\n      alert(\"Please select a file.\");\n      return;\n    }\n    if (file.type !== \"application/pdf\") {\n      alert(\"Please upload a valid PDF file.\");\n      return;\n    }\n    setFileName(file.name);\n\n    // Convert the file to a Base64 string\n    const reader = new FileReader();\n    reader.onload = () => {\n      const base64String = reader.result.split(\",\")[1]; // Remove \"data:application/pdf;base64,\"\n      setPdfBase64(base64String);\n    };\n    reader.onerror = () => {\n      alert(\"Failed to read file.\");\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // Handle form submission\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!pdfBase64) {\n      alert(\"No file uploaded.\");\n      return;\n    }\n    try {\n      const response = await fetch(\"/upload-pdf\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `Bearer ${localStorage.getItem('doctor_access_token')}`\n        },\n        body: JSON.stringify({\n          pdf: pdfBase64,\n          fileName: fileName\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        alert(\"PDF uploaded successfully!\");\n        console.log(\"Response:\", data);\n      } else {\n        alert(\"Failed to upload PDF.\");\n        console.error(\"Error:\", data);\n      }\n    } catch (error) {\n      alert(\"An error occurred.\");\n      console.error(\"Error:\", error);\n    }\n  };\n  useEffect(() => {\n    const fetchAppointmentsWithPatients = async () => {\n      try {\n        const token = localStorage.getItem('doctor_access_token'); // Get the token\n        const doctorId = getDoctorIdFromJWT(); // Get the doctor ID from the token\n\n        if (!doctorId || !token) {\n          console.error('Missing doctor ID or token');\n          return;\n        }\n\n        // Fetch appointments for the doctor\n        const response = await fetch(`http://127.0.0.1:5000/api/doctor/appointments`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}` // Add the JWT token\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n\n          // Merge appointments with patient data\n          const mergedAppointments = await Promise.all(data.appointments.map(async appointment => {\n            const patientResponse = await fetch(`http://127.0.0.1:5000/api/doctor/patients/${appointment.patient_id}`,\n            // Fetch patient details using patientId\n            {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}` // Add the JWT token\n              }\n            });\n            if (patientResponse.ok) {\n              const patientData = await patientResponse.json();\n              console.log(appointment.data, appointment);\n              return {\n                ...appointment,\n                patient_name: patientData.patient.name,\n                // Merge patient name\n                formattedDate: formatDate(appointment.appointment_date) // Format the appointment date\n              };\n            } else {\n              console.error('Failed to fetch patient details for ID:', appointment.patient_id);\n              return {\n                ...appointment,\n                patient_name: 'Unknown',\n                // Fallback for patient name\n                formattedDate: formatDate(appointment.date) // Add fallback formatted date\n              };\n            }\n          }));\n          setAppointments(mergedAppointments);\n        } else {\n          console.error('Failed to fetch appointments.');\n        }\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    };\n    fetchAppointmentsWithPatients();\n  }, []);\n  const handlePatientForm = patientId => {\n    // Navigate to the patient's form page using their ID\n    navigate(`/patient-form/${patientId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"dashboard-title\",\n      children: \"Doctor Dashboard - Appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), appointments.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"appointments-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Sl. No.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Patient Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: appointments.map((appointment, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: appointment.patient_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: appointment.formattedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"pdfUpload\",\n              style: styles.uploadButton,\n              children: [\"Select PDF\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                id: \"pdfUpload\",\n                accept: \"application/pdf\",\n                onChange: handleFileChange,\n                style: styles.fileInput\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 17\n            }, this), fileName && /*#__PURE__*/_jsxDEV(\"p\", {\n              style: styles.fileName,\n              children: [\"Selected File: \", fileName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 32\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              style: styles.submitButton,\n              children: \"Upload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 17\n          }, this)]\n        }, appointment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-appointments\",\n      children: \"No appointments available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorDashboard, \"TQeHoBtDLd4iD/kPswxuONtbunI=\", false, function () {\n  return [useNavigate];\n});\n_c = DoctorDashboard;\nexport default DoctorDashboard;\nvar _c;\n$RefreshReg$(_c, \"DoctorDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jwtDecode","jsxDEV","_jsxDEV","styles","form","maxWidth","margin","padding","border","borderRadius","backgroundColor","textAlign","uploadButton","display","color","cursor","fileInput","fileName","marginTop","fontSize","submitButton","DoctorDashboard","_s","appointments","setAppointments","navigate","message","setMessage","getDoctorIdFromJWT","token","localStorage","getItem","decoded","console","log","sub","id","error","formatDate","dateString","date","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","pdfBase64","setPdfBase64","setFileName","patientData","setPatientData","handleFileChange","event","file","target","files","alert","type","name","reader","FileReader","onload","base64String","result","split","onerror","readAsDataURL","handleSubmit","preventDefault","response","fetch","method","headers","Authorization","body","JSON","stringify","pdf","data","json","ok","fetchAppointmentsWithPatients","doctorId","mergedAppointments","Promise","all","map","appointment","patientResponse","patient_id","patient_name","patient","formattedDate","appointment_date","handlePatientForm","patientId","className","children","_jsxFileName","lineNumber","columnNumber","length","index","htmlFor","style","accept","onChange","_c","$RefreshReg$"],"sources":["/home/cero-vengeance/SoftwareLab/SL_Project/frontend/src/components/Dashboard/DoctorDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../../styles/Dashboard.css';\nimport {jwtDecode} from 'jwt-decode'; // Ensure you have installed jwt-decode with `npm install jwt-decode`\n\n\nconst styles = {\n  form: {\n    maxWidth: \"400px\",\n    margin: \"0 auto\",\n    padding: \"20px\",\n    border: \"1px solid #ccc\",\n    borderRadius: \"8px\",\n    backgroundColor: \"#f9f9f9\",\n    textAlign: \"center\",\n  },\n  uploadButton: {\n    display: \"inline-block\",\n    padding: \"10px 15px\",\n    margin: \"20px 0\",\n    border: \"1px solid #007bff\",\n    borderRadius: \"4px\",\n    backgroundColor: \"#007bff\",\n    color: \"#fff\",\n    cursor: \"pointer\",\n    textAlign: \"center\",\n  },\n  fileInput: {\n    display: \"none\",\n  },\n  fileName: {\n    marginTop: \"10px\",\n    fontSize: \"14px\",\n    color: \"#555\",\n  },\n  submitButton: {\n    padding: \"10px 15px\",\n    border: \"none\",\n    borderRadius: \"4px\",\n    backgroundColor: \"#007bff\",\n    color: \"#fff\",\n    fontSize: \"16px\",\n    cursor: \"pointer\",\n  },\n};\n\n\nfunction DoctorDashboard() {\n  const [appointments, setAppointments] = useState([]);\n  const navigate = useNavigate();\n  const [message, setMessage] = useState('');\n\n  // Function to decode the JWT and get doctor ID\n  const getDoctorIdFromJWT = () => {\n    try {\n      const token = localStorage.getItem('doctor_access_token'); // Replace with your token key\n      if (!token) {\n        setMessage('You are not authenticated. Please log in.');\n        return null;\n      }\n      const decoded = jwtDecode(token);\n      console.log('Decoded Token:', decoded);\n      return decoded.sub.id; // Adjust based on your JWT payload structure\n    } catch (error) {\n      console.error('Error decoding JWT:', error);\n      setMessage('Invalid authentication token.');\n      return null;\n    }\n  };\n\n  // Function to format the Python datetime to \"DD-MM-YYYY\"\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n    const year = date.getFullYear();\n    return `${day}-${month}-${year}`;\n  };\n\n\n  const [pdfBase64, setPdfBase64] = useState(null);\n  const [fileName, setFileName] = useState(null);\n  const [patientData, setPatientData] = useState({});\n\n  // Handle file upload\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n\n    if (!file) {\n      alert(\"Please select a file.\");\n      return;\n    }\n\n    if (file.type !== \"application/pdf\") {\n      alert(\"Please upload a valid PDF file.\");\n      return;\n    }\n\n    setFileName(file.name);\n\n    // Convert the file to a Base64 string\n    const reader = new FileReader();\n    reader.onload = () => {\n      const base64String = reader.result.split(\",\")[1]; // Remove \"data:application/pdf;base64,\"\n      setPdfBase64(base64String);\n    };\n    reader.onerror = () => {\n      alert(\"Failed to read file.\");\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // Handle form submission\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!pdfBase64) {\n      alert(\"No file uploaded.\");\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/upload-pdf\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `Bearer ${localStorage.getItem('doctor_access_token')}`,\n        },\n        body: JSON.stringify({\n          pdf: pdfBase64,\n          fileName: fileName,\n        }),\n      });\n\n      const data = await response.json();\n      if (response.ok) {\n        alert(\"PDF uploaded successfully!\");\n        console.log(\"Response:\", data);\n      } else {\n        alert(\"Failed to upload PDF.\");\n        console.error(\"Error:\", data);\n      }\n    } catch (error) {\n      alert(\"An error occurred.\");\n      console.error(\"Error:\", error);\n    }\n  };\n\n\n  useEffect(() => {\n    const fetchAppointmentsWithPatients = async () => {\n      try {\n        const token = localStorage.getItem('doctor_access_token'); // Get the token\n        const doctorId = getDoctorIdFromJWT(); // Get the doctor ID from the token\n\n        if (!doctorId || !token) {\n          console.error('Missing doctor ID or token');\n          return;\n        }\n\n        // Fetch appointments for the doctor\n        const response = await fetch(`http://127.0.0.1:5000/api/doctor/appointments`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`, // Add the JWT token\n          },\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n\n          // Merge appointments with patient data\n          const mergedAppointments = await Promise.all(\n            data.appointments.map(async (appointment) => {\n              const patientResponse = await fetch(\n                `http://127.0.0.1:5000/api/doctor/patients/${appointment.patient_id}`, // Fetch patient details using patientId\n                {\n                  method: 'GET',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`, // Add the JWT token\n                  },\n                }\n              );\n\n              if (patientResponse.ok) {\n                const patientData = await patientResponse.json();\n                console.log(appointment.data,appointment)\n                return { \n                  ...appointment, \n                  patient_name: patientData.patient.name, // Merge patient name\n                  formattedDate: formatDate(appointment.appointment_date) // Format the appointment date\n                };\n              } else {\n                console.error('Failed to fetch patient details for ID:', appointment.patient_id);\n                return { \n                  ...appointment, \n                  patient_name: 'Unknown', // Fallback for patient name\n                  formattedDate: formatDate(appointment.date) // Add fallback formatted date\n                };\n              }\n            })\n          );\n\n          setAppointments(mergedAppointments);\n        } else {\n          console.error('Failed to fetch appointments.');\n        }\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    };\n\n    fetchAppointmentsWithPatients();\n  }, []);\n\n  const handlePatientForm = (patientId) => {\n    // Navigate to the patient's form page using their ID\n    navigate(`/patient-form/${patientId}`);\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h2 className=\"dashboard-title\">Doctor Dashboard - Appointments</h2>\n      {appointments.length > 0 ? (\n        <table className=\"appointments-table\">\n          <thead>\n            <tr>\n              <th>Sl. No.</th>\n              <th>Patient Name</th>\n              <th>Date</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {appointments.map((appointment, index) => (\n              <tr key={appointment.id}>\n                <td>{index + 1}</td>\n                <td>{appointment.patient_name}</td>\n                <td>{appointment.formattedDate}</td>\n                <td>\n                <label htmlFor=\"pdfUpload\" style={styles.uploadButton}>\n                    Select PDF\n                    <input\n                      type=\"file\"\n                      id=\"pdfUpload\"\n                      accept=\"application/pdf\"\n                      onChange={handleFileChange}\n                      style={styles.fileInput}\n                    />\n                  </label>\n                  {fileName && <p style={styles.fileName}>Selected File: {fileName}</p>}\n                  <button type=\"submit\" style={styles.submitButton}>\n                    Upload\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <div className=\"no-appointments\">No appointments available.</div>\n      )}\n    </div>\n  );\n}\n\nexport default DoctorDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}