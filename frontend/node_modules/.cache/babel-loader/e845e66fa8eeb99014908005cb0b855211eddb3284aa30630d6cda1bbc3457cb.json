{"ast":null,"code":"var _jsxFileName = \"/home/cero-vengeance/SoftwareLab/SL_Project/frontend/src/components/Dashboard/DoctorDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../../styles/Dashboard.css';\nimport { jwtDecode } from 'jwt-decode'; // Ensure you have installed jwt-decode with `npm install jwt-decode`\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DoctorDashboard() {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const navigate = useNavigate();\n  const [message, setMessage] = useState('');\n\n  // Function to decode the JWT and get doctor ID\n  const getDoctorIdFromJWT = () => {\n    try {\n      const token = localStorage.getItem('doctor_access_token'); // Replace with your token key\n      if (!token) {\n        setMessage('You are not authenticated. Please log in.');\n        return null;\n      }\n      const decoded = jwtDecode(token);\n      console.log('Decoded Token:', decoded);\n      return decoded.sub.id; // Adjust based on your JWT payload structure\n    } catch (error) {\n      console.error('Error decoding JWT:', error);\n      setMessage('Invalid authentication token.');\n      return null;\n    }\n  };\n\n  // Function to format the Python datetime to \"DD-MM-YYYY\"\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n    const year = date.getFullYear();\n    return `${day}-${month}-${year}`;\n  };\n  useEffect(() => {\n    const fetchAppointmentsWithPatients = async () => {\n      try {\n        const token = localStorage.getItem('doctor_access_token'); // Get the token\n        const doctorId = getDoctorIdFromJWT(); // Get the doctor ID from the token\n\n        if (!doctorId || !token) {\n          console.error('Missing doctor ID or token');\n          return;\n        }\n\n        // Fetch appointments for the doctor\n        const response = await fetch(`http://127.0.0.1:5000/api/doctor/appointments`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}` // Add the JWT token\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n\n          // Merge appointments with patient data\n          const mergedAppointments = await Promise.all(data.appointments.map(async appointment => {\n            const patientResponse = await fetch(`http://127.0.0.1:5000/api/doctor/patients/${appointment.patient_id}`,\n            // Fetch patient details using patientId\n            {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}` // Add the JWT token\n              }\n            });\n            if (patientResponse.ok) {\n              const patientData = await patientResponse.json();\n              console.log(appointment.data, appointment);\n              return {\n                ...appointment,\n                patient_name: patientData.patient.name,\n                // Merge patient name\n                formattedDate: formatDate(appointment.appointment_date) // Format the appointment date\n              };\n            } else {\n              console.error('Failed to fetch patient details for ID:', appointment.patient_id);\n              return {\n                ...appointment,\n                patient_name: 'Unknown',\n                // Fallback for patient name\n                formattedDate: formatDate(appointment.date) // Add fallback formatted date\n              };\n            }\n          }));\n          setAppointments(mergedAppointments);\n        } else {\n          console.error('Failed to fetch appointments.');\n        }\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    };\n    fetchAppointmentsWithPatients();\n  }, []);\n  const handlePatientForm = patientId => {\n    // Navigate to the patient's form page using their ID\n    navigate(`/patient-form/${patientId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"dashboard-title\",\n      children: \"Doctor Dashboard - Appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), appointments.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"appointments-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Sl. No.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Patient Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: appointments.map((appointment, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: appointment.patient_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: appointment.formattedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-button\",\n              onClick: () => handlePatientForm(appointment.patient_id),\n              children: \"View Form\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this)]\n        }, appointment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-appointments\",\n      children: \"No appointments available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorDashboard, \"xU/aoQ42zuI+7ABBRQHR7CoPXxA=\", false, function () {\n  return [useNavigate];\n});\n_c = DoctorDashboard;\nexport default DoctorDashboard;\nvar _c;\n$RefreshReg$(_c, \"DoctorDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jwtDecode","jsxDEV","_jsxDEV","DoctorDashboard","_s","appointments","setAppointments","navigate","message","setMessage","getDoctorIdFromJWT","token","localStorage","getItem","decoded","console","log","sub","id","error","formatDate","dateString","date","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","fetchAppointmentsWithPatients","doctorId","response","fetch","method","headers","Authorization","ok","data","json","mergedAppointments","Promise","all","map","appointment","patientResponse","patient_id","patientData","patient_name","patient","name","formattedDate","appointment_date","handlePatientForm","patientId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","index","onClick","_c","$RefreshReg$"],"sources":["/home/cero-vengeance/SoftwareLab/SL_Project/frontend/src/components/Dashboard/DoctorDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../../styles/Dashboard.css';\nimport {jwtDecode} from 'jwt-decode'; // Ensure you have installed jwt-decode with `npm install jwt-decode`\n\nfunction DoctorDashboard() {\n  const [appointments, setAppointments] = useState([]);\n  const navigate = useNavigate();\n  const [message, setMessage] = useState('');\n\n  // Function to decode the JWT and get doctor ID\n  const getDoctorIdFromJWT = () => {\n    try {\n      const token = localStorage.getItem('doctor_access_token'); // Replace with your token key\n      if (!token) {\n        setMessage('You are not authenticated. Please log in.');\n        return null;\n      }\n      const decoded = jwtDecode(token);\n      console.log('Decoded Token:', decoded);\n      return decoded.sub.id; // Adjust based on your JWT payload structure\n    } catch (error) {\n      console.error('Error decoding JWT:', error);\n      setMessage('Invalid authentication token.');\n      return null;\n    }\n  };\n\n  // Function to format the Python datetime to \"DD-MM-YYYY\"\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n    const year = date.getFullYear();\n    return `${day}-${month}-${year}`;\n  };\n\n  useEffect(() => {\n    const fetchAppointmentsWithPatients = async () => {\n      try {\n        const token = localStorage.getItem('doctor_access_token'); // Get the token\n        const doctorId = getDoctorIdFromJWT(); // Get the doctor ID from the token\n\n        if (!doctorId || !token) {\n          console.error('Missing doctor ID or token');\n          return;\n        }\n\n        // Fetch appointments for the doctor\n        const response = await fetch(`http://127.0.0.1:5000/api/doctor/appointments`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${token}`, // Add the JWT token\n          },\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n\n          // Merge appointments with patient data\n          const mergedAppointments = await Promise.all(\n            data.appointments.map(async (appointment) => {\n              const patientResponse = await fetch(\n                `http://127.0.0.1:5000/api/doctor/patients/${appointment.patient_id}`, // Fetch patient details using patientId\n                {\n                  method: 'GET',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    Authorization: `Bearer ${token}`, // Add the JWT token\n                  },\n                }\n              );\n\n              if (patientResponse.ok) {\n                const patientData = await patientResponse.json();\n                console.log(appointment.data,appointment)\n                return { \n                  ...appointment, \n                  patient_name: patientData.patient.name, // Merge patient name\n                  formattedDate: formatDate(appointment.appointment_date) // Format the appointment date\n                };\n              } else {\n                console.error('Failed to fetch patient details for ID:', appointment.patient_id);\n                return { \n                  ...appointment, \n                  patient_name: 'Unknown', // Fallback for patient name\n                  formattedDate: formatDate(appointment.date) // Add fallback formatted date\n                };\n              }\n            })\n          );\n\n          setAppointments(mergedAppointments);\n        } else {\n          console.error('Failed to fetch appointments.');\n        }\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    };\n\n    fetchAppointmentsWithPatients();\n  }, []);\n\n  const handlePatientForm = (patientId) => {\n    // Navigate to the patient's form page using their ID\n    navigate(`/patient-form/${patientId}`);\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h2 className=\"dashboard-title\">Doctor Dashboard - Appointments</h2>\n      {appointments.length > 0 ? (\n        <table className=\"appointments-table\">\n          <thead>\n            <tr>\n              <th>Sl. No.</th>\n              <th>Patient Name</th>\n              <th>Date</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {appointments.map((appointment, index) => (\n              <tr key={appointment.id}>\n                <td>{index + 1}</td>\n                <td>{appointment.patient_name}</td>\n                <td>{appointment.formattedDate}</td>\n                <td>\n                  <button\n                    className=\"action-button\"\n                    onClick={() => handlePatientForm(appointment.patient_id)}\n                  >\n                    View Form\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <div className=\"no-appointments\">No appointments available.</div>\n      )}\n    </div>\n  );\n}\n\nexport default DoctorDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}